library(devtools)
document()
?saenet
document()
?saenet
# Example 1: Standard Adaptive Elastic Net (No Structure)
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit the model
fit <- saenet(y, X, nIteration = 3, nfolds = 5)
# Extract the coefficient estimates from the final iteration
beta_est <- fit$betahat[, 4]  # 4th column corresponds to 3rd iteration
beta_est
beta_true
# Create group structure: 10 groups with 20 variables each
groups <- rep(1:10, each = 20)
# Define structure information
structure.info <- list(grp = groups)
# Fit model with group structure
fit_group <- saenet(y, X, structure.info = structure.info)
fit_group
?gcdnet
?saenet
# Example 3: Covariate-Dependent Structure
# Generate a covariate for each predictor
u <- rnorm(p)
# Define structure information
structure.info <- list(cov = u)
# Fit model with covariate structure
fit_cov <- saenet(y, X, structure.info = structure.info)
fit_cov
?gcdnet
document()
?saenet
# Example 1: Standard Adaptive Elastic Net (No Structure) with x,y interface
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit with x,y interface
fit1 <- saenet(x = X, y = y, nIteration = 3)
document()
?sanet
?saenet
## Not run:
# Example 1: Standard Adaptive Elastic Net (No Structure) with x,y interface
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit with x,y interface
fit1 <- saenet(x = X, y = y, nIteration = 3)
# Alternatively, fit with formula interface
data_df <- data.frame(y = y, X)
fit2 <- saenet(formula = y ~ ., data = data_df, nIteration = 3)
exp(seq(0, -40, length.out = 50))
document()
# Example 1: Standard Adaptive Elastic Net (No Structure) with x,y interface
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit with x,y interface
fit1 <- saenet(x = X, y = y, nIteration = 3)
fit1
data_df <- data.frame(y = y, X)
fit2 <- saenet(formula = y ~ ., data = data_df, nIteration = 3)
fit2
document()
?saenet
document()
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
# True coefficients: 10 non-zero, 190 zero
true_beta <- c(rep(1.5, 5), rep(-1.5, 5), rep(0, p - 10))
y <- X %*% true_beta + rnorm(n, 0, sd = 1.0)
colnames(X) <- paste0("V", 1:p)
# --- Example 1: Standard Adaptive Elastic Net (No Structure) ---
cat("\nRunning Example 1: No Structure\n")
fit_nostruct <- saenet(x = X, y = y, nIteration = 3, nfolds = 5, nCore = 1, verbose = FALSE)
library(foreach)
library(doParallel)
library(parallel)
library(gcdnet)
library(stats)
library(utils)
document()
library(Matrix)
document()
?saenet
# Example 1: Standard Adaptive Elastic Net (No Structure)
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit the model
fit <- saenet(y, X, nIteration = 3, nfolds = 5)
fit <- saenet(y, x, nIteration = 3, nfolds = 5)
document()
?saenet
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit the model
fit <- saenet(y = y, x = X, nIteration = 3, nfolds = 5)
# Create group structure: 10 groups with 20 variables each
groups <- rep(1:10, each = 20)
# Define structure information
structure.info <- list(grp = groups)
# Fit model with group structure
fit_group <- saenet(y = y, x = X, structure.info = structure.info, nIteration = 3)
library(parallel)
n_cores <- min(detectCores() - 1, 4)  # Use at most 4 cores
fit_parallel <- saenet(y = y, x = X, nCore = n_cores, nIteration = 2)
document()
library(parallel)
n_cores <- min(detectCores() - 1, 4)  # Use at most 4 cores
fit_parallel <- saenet(y = y, x = X, nCore = n_cores, nIteration = 2)
?saenet
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit the model
fit <- saenet(y = y, x = X, max_iterations = 3, num_folds = 5)
?gcdnet
cv.gcdnet
?cv.gcdnet
document()
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit the model
fit <- saenet(y = y, x = X, max_iterations = 3, num_folds = 5)
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit the model
fit <- saenet(y = y, x = X, max_iterations = 3, num_folds = 5, num_cores = 5)
fit
?saenet
df <- data.frame(y,X)
saenet(y ~ X, data =df, max_iterations = 3, num_folds = 5)
formula <- Y ~ X
fit <- saenet(y ~ -1 + X, data =df, max_iterations = 3, num_folds = 5)
fit
formula = Y ~ X
formula = y ~ X
data = df
# Formula interface
if (missing(data)) {
data <- environment(formula)
}
model_frame <- model.frame(formula, data)
y <- model.response(model_frame, "numeric")
X <- model.matrix(formula, model_frame)[, -1, drop = FALSE]  # Remove intercept column
y
x
X
max(parallel::detectCores() - 1, 1)
ncol(X)
fit <- saenet(y ~ X, data =df, max_iterations = 3, num_folds = 5, standardize = FALSE)
fit
document()
fit <- saenet(y ~ X, data =df, max_iterations = 3, num_folds = 5, standardize = FALSE)
fit <- saenet(y ~ X, data =df, max_iterations = 3, num_folds = 5, standardize = TRUE)
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit the model
fit <- saenet(y ~ X, data =df, max_iterations = 2, num_folds = 5, standardize = TRUE)
fit$coefficients
group <- 1:200
structure_info <- list(group = group)
fit2 <- saenet(y ~ X, data =df, structure_info = structure_info, max_iterations = 2, num_folds = 5, standardize = TRUE)
fit2$intercept - fit$intercept
fit2$intercept
fit2$coefficients - fit$coefficients
groups <- rep(1:10, each = 20)
structure_info <- list(group = group)
fit2 <- saenet(y ~ X, data =df, structure_info = structure_info, max_iterations = 2, num_folds = 5, standardize = TRUE)
structure_info <- list(covariate = group)
fit3 <- saenet(y ~ X, data =df, structure_info = structure_info, max_iterations = 2, num_folds = 5, standardize = TRUE)
fit2$intercept - fit3$intercept
fit2$coefficients - fit3$coefficients
document()
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit the model
fit <- saenet(y ~ X, data =df, max_iterations = 2, num_folds = 5, standardize = TRUE)
fit
？cv.gcdnet
cv.gcdnet
？cv.gcdnet
?cv.gcdnet
document()
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit the model
fit <- saenet(y ~ X, data =df, max_iterations = 2, num_folds = 5, standardize = TRUE)
groups <- rep(1:10, each = 20)
structure_info <- list(group = group)
fit2 <- saenet(y ~ X, data =df, structure_info = structure_info, max_iterations = 2, num_folds = 5, standardize = TRUE)
structure_info <- list(covariate = group)
fit3 <- saenet(y ~ X, data =df, structure_info = structure_info, max_iterations = 2, num_folds = 5, standardize = TRUE)
？gcdnet
?gcdnet
gcdnet
sqsvmpath
hsvmpath
?saenet
library(devtools)
document()
?saenet
# Example 1: Standard Adaptive Elastic Net (No Structure)
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit the model
fit <- saenet(y = y, x = X, max_iterations = 3, num_folds = 5)
document()
# Example 1: Standard Adaptive Elastic Net (No Structure)
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit the model
fit <- saenet(y = y, x = X, max_iterations = 3, num_folds = 5)
print(fit)
beta_est <- predict(fit, type = "coefficients")
beta_est
predictions <- predict(fit, newx = X)
predictions
plot(fit, type = "coefficients")
# Plot CV error across iterations
plot(fit, type = "cv.error")
# Example 2: Group-based Structure
# Create arbitrary groups for variables (10 groups of 20 variables each)
groups <- rep(1:10, each = 20)
structure_info <- list(group = groups)
# Fit the model with group structure
fit_group <- saenet(y = y, x = X, structure_info = structure_info,
max_iterations = 3, num_folds = 5)
fit_group
# Plot non-zero coefficients
plot(fit_group, type = "coefficients")
plot(fit, type = "cv.error")
plot(fit, type = "coefficients")
# Plot non-zero coefficients
plot(fit_group, type = "coefficients")
# Plot non-zero coefficients
plot(fit_covariate, type = "coefficients")
# Example 3: Covariate-dependent Structure
# Create arbitrary covariate related to variable importance
# (higher values for more important variables)
covariate <- runif(p)
covariate[1:10] <- covariate[1:10] + 0.5  # make important variables have higher values
structure_info <- list(covariate = matrix(covariate, ncol = 1))
# Fit the model with covariate structure
fit_covariate <- saenet(y = y, x = X, structure_info = structure_info,
max_iterations = 3, num_folds = 5)
# Plot non-zero coefficients
plot(fit_covariate, type = "coefficients")
# Example 3: Covariate-dependent Structure
# Create arbitrary covariate related to variable importance
# (higher values for more important variables)
covariate <- runif(p)
covariate[1:10] <- covariate[1:10] + 1  # make important variables have higher values
structure_info <- list(covariate = matrix(covariate, ncol = 1))
# Fit the model with covariate structure
fit_covariate <- saenet(y = y, x = X, structure_info = structure_info,
max_iterations = 3, num_folds = 5)
# Plot non-zero coefficients
plot(fit_covariate, type = "coefficients")
document()
?saenet
# Example 1: Standard Adaptive Elastic Net (No Structure)
set.seed(123)
n <- 100  # number of observations
p <- 200  # number of variables
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(rep(1, 10), rep(0, p - 10))
y <- X %*% beta_true + rnorm(n, 0, 0.5)
# Fit the model
fit <- saenet(y = y, x = X, max_iterations = 3, num_folds = 5)
# View model summary
print(fit)
# Extract coefficients from the final iteration
beta_est <- predict(fit, type = "coefficients")
# Plot non-zero coefficients
plot(fit, type = "coefficients")
# Example 2: Group-based Structure
# Create arbitrary groups for variables (10 groups of 20 variables each)
groups <- rep(1:10, each = 20)
structure_info <- list(group = groups)
# Fit the model with group structure
fit_group <- saenet(y = y, x = X, structure_info = structure_info,
max_iterations = 3, num_folds = 5)
# Plot non-zero coefficients
plot(fit_group, type = "coefficients")
# Example 3: Covariate-dependent Structure
# Create arbitrary covariate related to variable importance
# (higher values for more important variables)
covariate <- runif(p)
covariate[1:10] <- covariate[1:10] + 0.5  # make important variables have higher values
structure_info <- list(covariate = matrix(covariate, ncol = 1))
# Fit the model with covariate structure
fit_covariate <- saenet(y = y, x = X, structure_info = structure_info,
max_iterations = 3, num_folds = 5)
# Plot non-zero coefficients
plot(fit_covariate, type = "coefficients")
# Fit the model with covariate structure
fit_covariate <- saenet(y = y, x = X, structure_info = structure_info,
max_iterations = 5, num_folds = 5, num_cores = 6)
# Plot non-zero coefficients
plot(fit_covariate, type = "coefficients")
# Example 3: Covariate-dependent Structure
# Create arbitrary covariate related to variable importance
# (higher values for more important variables)
covariate <- runif(p)
covariate[1:10] <- covariate[1:10] + 2  # make important variables have higher values
structure_info <- list(covariate = matrix(covariate, ncol = 1))
# Fit the model with covariate structure
fit_covariate <- saenet(y = y, x = X, structure_info = structure_info,
max_iterations = 5, num_folds = 5, num_cores = 6)
# Plot non-zero coefficients
plot(fit_covariate, type = "coefficients")
# Example 3: Covariate-dependent Structure
# Create arbitrary covariate related to variable importance
# (higher values for more important variables)
covariate <- runif(p)
covariate[1:10] <- covariate[1:10] + 1  # make important variables have higher values
structure_info <- list(covariate = matrix(covariate, ncol = 1))
# Fit the model with covariate structure
fit_covariate <- saenet(y = y, x = X, structure_info = structure_info,
max_iterations = 5, num_folds = 5, num_cores = 6)
# Plot non-zero coefficients
plot(fit_covariate, type = "coefficients")
# Plot non-zero coefficients
plot(fit, type = "coefficients")
# Plot non-zero coefficients
plot(fit, type = "coefficients")
plot(fit_covariate, type = "coefficients")
document()
plot(fit_covariate, type = "coefficients")
# Example 3: Covariate-dependent Structure
# Create arbitrary covariate related to variable importance
# (higher values for more important variables)
covariate <- runif(p)
covariate[1:10] <- covariate[1:10] + 2  # make important variables have higher values
structure_info <- list(covariate = matrix(covariate, ncol = 1))
# Fit the model with covariate structure
fit_covariate <- saenet(y = y, x = X, structure_info = structure_info,
max_iterations = 5, num_folds = 5, num_cores = 6)
# Plot non-zero coefficients
plot(fit_covariate, type = "coefficients")
devtools::install("./SAEnet")
devtools::install("SAEnet")
devtools::install()
devtools::check()
document()
library(devtools)
document()
devtools::install()
devtools::check()
document()
devtools::install()
devtools::check()
devtools::install()
devtools::check()
usethis::use_mit_license("Xianyang Zhang")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
